console.log("Funcion main"); // üéØ Verifica el inicio del proceso

// üì∞ Importar la API de NewsAPI
const API_KEY = "46764596d04e4535a98f20d752e0735d"; // üîë Tu clave para la API
const BASE_URL = "https://newsapi.org/v2/everything"; // üåê URL base de la API

// üîí Lista para almacenar las tarjetas marcadas como favoritas
let favoriteCards = JSON.parse(localStorage.getItem("favoriteCards")) || []; // Cargar favoritos desde localStorage

// üîÑ Funci√≥n gen√©rica para obtener noticias por categor√≠a
async function fetchNews(query) {
    const url = `${BASE_URL}?q=${query}&apiKey=${API_KEY}`; // üåê Construir la URL con los par√°metros

    try {
        const response = await fetch(url); // üîÑ Realizar solicitud a la API
        const data = await response.json(); // üìú Parsear la respuesta a formato JSON

        if (data.status === "ok") {
            return data; // üì∞ Retornar datos completos (art√≠culos incluidos)
        } else {
            console.error("‚ö†Ô∏è Error en la API:", data.message); // ‚ö†Ô∏è Mostrar error si ocurre
            return null;
        }
    } catch (error) {
        console.error("‚ùå Error al obtener las noticias:", error); // ‚ùå Capturar errores de la solicitud
        return null;
    }
}

// üîÑ Funci√≥n para actualizar las tarjetas con noticias recientes
async function updateCards(category) {
    console.log(`üîÑ Actualizando tarjetas para la categor√≠a: ${category}`);

    try {
        // Obtener los datos de noticias
        const response = await fetchNews(category);
        const articles = response.articles; // üì∞ Extraer los art√≠culos de la respuesta

        if (!articles || articles.length === 0) {
            console.error("‚ùå No se encontraron noticias para esta categor√≠a.");
            return;
        }

        // Seleccionar las tarjetas existentes
        const cardsContainer = document.querySelector(".card-container");
        cardsContainer.innerHTML = ""; // Limpiar el contenedor SOLO para esta categor√≠a

        articles.slice(0, 5).forEach((article) => {
            const card = createCard(article);
            cardsContainer.appendChild(card); // Agregar tarjeta al contenedor
        });

        console.log("‚úÖ Las tarjetas se han actualizado correctamente.");
    } catch (error) {
        console.error("‚ùå Error al actualizar las tarjetas:", error);
    }
}

// üîß Funci√≥n para crear una tarjeta
function createCard(article) {
    const card = document.createElement("div");
    card.classList.add("card");
    card.innerHTML = `
        <div class="card-image">
            <a href="${article.url}" target="_blank">
                <img src="${article.urlToImage || './assets/images/placeholder.jpg'}" alt="${article.title}">
            </a>
            <div class="iconimage1">
                <img src="./assets/icons/emptyFavoriteIcon.svg" alt="Favoritos vac√≠os">
            </div>
        </div>
        <div class="card-content">
            <h3 class="card-title">${article.title}</h3>
            <p class="card-text">${article.description || 'Descripci√≥n no disponible.'}</p>
            <a href="${article.url}" class="card-button" target="_blank">
                <p>Leer m√°s ...</p>
            </a>
        </div>
    `;

    // Verificar si el art√≠culo ya est√° en favoritos y actualizar el √≠cono
    const isFavorite = favoriteCards.some((fav) => fav.article.title === article.title);
    const favoriteIcon = card.querySelector(".iconimage1 img");
    favoriteIcon.src = isFavorite ? "./assets/icons/fillFavoriteIcon.svg" : "./assets/icons/emptyFavoriteIcon.svg";

    // üìå Agregar evento de favoritos
    favoriteIcon.addEventListener("click", () => toggleFavorite(card, article, favoriteIcon));

    return card;
}

// ‚≠ê Funci√≥n para alternar el estado de favoritos
function toggleFavorite(card, article, icon) {
    if (icon.src.includes("emptyFavoriteIcon.svg")) {
        icon.src = "./assets/icons/fillFavoriteIcon.svg"; // Cambiar a √≠cono lleno
        favoriteCards.push({ card, article }); // Guardar la tarjeta en favoritos
        console.log("‚úÖ Art√≠culo marcado como favorito:", article.title);
    } else {
        icon.src = "./assets/icons/emptyFavoriteIcon.svg"; // Cambiar a √≠cono vac√≠o
        favoriteCards = favoriteCards.filter((fav) => fav.article.title !== article.title); // Remover de favoritos
        console.log("‚ùå Art√≠culo eliminado de favoritos:", article.title);
    }

    // Guardar el estado actualizado en localStorage
    localStorage.setItem("favoriteCards", JSON.stringify(favoriteCards));

    // Actualizar din√°micamente la vista de favoritos si estamos en ese filtro
    const currentCategory = document.querySelector(".filters .active")?.getAttribute("data-category");
    if (currentCategory === "favorites") {
        showFavoriteCards();
    }
}

// üõ†Ô∏è Mostrar solo las tarjetas favoritas
function showFavoriteCards() {
    console.log("‚ú® Mostrando solo las tarjetas favoritas...");
    const cardsContainer = document.querySelector(".card-container");
    cardsContainer.innerHTML = ""; // Limpiar solo la vista de favoritos

    favoriteCards.forEach(({ article }) => {
        const clonedCard = createCard(article); // Crear tarjeta clonada
        cardsContainer.appendChild(clonedCard); // Agregar tarjeta clonada al contenedor
    });
}

// üéØ Escuchar cambios de categor√≠a
document.addEventListener("campus:category-change", (event) => {
    const category = event.detail.category;
    console.log("üöÄ Evento capturado, categor√≠a seleccionada:", category);

    if (category === "favorites") {
        showFavoriteCards(); // Mostrar solo las favoritas
    } else {
        updateCards(category); // Actualizar tarjetas seg√∫n la categor√≠a seleccionada
    }
});

// üõ†Ô∏è Actualizar las tarjetas al cargar la p√°gina con el filtro "all"
document.addEventListener("DOMContentLoaded", () => {
    updateCards("all"); // Inicializar con "All News"
});
